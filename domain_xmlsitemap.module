<?php

/**
 * @file
 * Contains domain_xmlsitemap.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Database\Query\Condition;

/**
 * Implements hook_help().
 */
function domain_xmlsitemap_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the domain_xmlsitemap module.
    case 'help.page.domain_xmlsitemap':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides domain contexts for XML sitemaps.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_xmlsitemap_context_info().
 */
function domain_xmlsitemap_xmlsitemap_context_info() {
  $info['domain'] = [
    'label' => t('Domain'),
    'default' => 0,
  ];
  return $info;
}

/**
 * Implements hook_xmlsitemap_context().
 */
function domain_xmlsitemap_xmlsitemap_context() {
  $context = [];
  $context['domain'] = \Drupal::service('domain.negotiator')->getActiveId();
  return $context;
}

/**
 * Implements hook_xmlsitemap_context_url_options().
 */
function domain_xmlsitemap_xmlsitemap_context_url_options(array $context) {
  $options = [];
  if (isset($context['domain']) && $domain = \Drupal::service('domain.loader')->load($context['domain'])) {
    $options['base_url'] = $domain->getPath();
  }
  return $options;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function domain_xmlsitemap_form_xmlsitemap_sitemap_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {

  $domains = \Drupal::service('domain.loader')->loadMultipleSorted();
  $options = [];
  foreach ($domains as $domain) {
    $options[$domain->getDomainId()] = $domain->getPath();
  }
  if ($entity = $form_state->getFormObject()->getEntity()) {
    $default = $entity->getContext()['domain'];
  }
  else {
    $default = 0;
  }
  $form['context']['domain'] = [
    '#type' => 'select',
    '#title' => t('Domain'),
    '#options' => $options,
    '#default_value' => $default,
    '#access' => !empty($options),
  ];
}

/**
 * Implements hook_xmlsitemap_link_alter().
 */
function domain_xmlsitemap_xmlsitemap_link_alter(&$link) {
  //error_log(print_r($link,1), 0);
  if ($link['type'] == 'mymodule') {
    $link['priority'] += 0.5;
  }
}

/**
 * Implements hook_query_TAG_alter().
 */
function domain_xmlsitemap_query_xmlsitemap_generate_alter(Drupal\Core\Database\Query\AlterableInterface $query) {

  $sitemap = $query->getMetaData('sitemap');
  if (!isset($sitemap->context['domain'])) {
    return;
  }

  //var_dump($sitemap->context['domain']);
  //debug_print_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);


  $query->leftJoin('node_access', 'na', "x.type = 'node' AND x.id = na.nid");
  $and = new Condition('AND');
  $and->condition('na.gid', $sitemap->context['domain'])
    ->condition('na.realm', 'domain_id');
  $query->condition($and);

}
